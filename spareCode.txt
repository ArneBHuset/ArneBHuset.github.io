<li>
                <button
                  class="block rounded-md bg-teal-600 px-5 py-2.5 text-sm font-medium text-white transition hover:bg-teal-700"
                  id="toggleHighContrast"
                >
                  High Contrast
                </button>
              </li>





        FIXING TIME AND DATE

        
To display dates in a more human-readable format, you can use JavaScript's Date object along with Intl.DateTimeFormat for formatting. This allows you to customize the date and time display to fit your needs better. Below is a simple example showing how you might convert and display the dates created, updated, and endsAt in a more readable format.

Example JavaScript Function
This function takes a date string in the ISO format (like "2023-11-05T14:15:59.030Z") and returns it in a more readable format:

javascript
Copy code
function formatDateTime(isoString) {
  const date = new Date(isoString);
  return new Intl.DateTimeFormat('en-US', {
    month: 'long', // "January", "February", etc.
    day: '2-digit', // "01", "02", etc.
    year: 'numeric', // "2023"
    hour: '2-digit', // "00" through "23"
    minute: '2-digit', // "00" through "59"
    second: '2-digit', // "00" through "59"
    timeZoneName: 'short' // "GMT", "EST", etc.
  }).format(date);
}
Usage
You can then use this function to format your date strings before displaying them in your HTML:

javascript
Copy code
const created = "2023-11-05T14:15:59.030Z";
const updated = "2023-11-05T16:15:59.030Z";
const endsAt = "2023-11-12T12:15:59.030Z";

document.getElementById('listingCreated').textContent = `Created: ${formatDateTime(created)}`;
document.getElementById('listingUpdated').textContent = `Updated: ${formatDateTime(updated)}`;
document.getElementById('listingEndsAt').textContent = `Ends At: ${formatDateTime(endsAt)}`;
This method allows you to easily adjust the date format across different locales by changing the locale string (e.g., 'en-US') and the options passed to Intl.DateTimeFormat. The above example uses 'en-US' for American English formatting, but you can adjust this as needed to suit your application's audience.

This approach gives you flexibility in how dates are displayed, making them more readable and user-friendly.



CAROUSEL

.carousel {
  overflow: hidden;
  white-space: nowrap;
}

.carousel-items .carousel-item {
  display: inline-block;
  width: 100%; /* Adjust based on the number of items to show at once */
  text-align: center;
}


.carousel {
  overflow: hidden;
  white-space: nowrap;
}

.carousel-items .carousel-item {
  display: inline-block;
  width: 100%; /* Adjust based on the number of items to show at once */
  text-align: center;
}

document.addEventListener('DOMContentLoaded', function() {
  const items = document.querySelectorAll('.carousel-item');
  let currentIndex = 0;

  function showItem(index) {
    // Hide all items
    items.forEach(item => item.style.display = 'none');

    // Show the item at the given index
    items[index].style.display = 'inline-block';
  }

  // Initial display
  showItem(currentIndex);

  // Event listeners for buttons
  document.getElementById('prevBtn').addEventListener('click', function() {
    if (currentIndex > 0) {
      currentIndex--;
      showItem(currentIndex);
    }
  });

  document.getElementById('nextBtn').addEventListener('click', function() {
    if (currentIndex < items.length - 1) {
      currentIndex++;
      showItem(currentIndex);
    }
  });
});
