<li>
                <button
                  class="block rounded-md bg-teal-600 px-5 py-2.5 text-sm font-medium text-white transition hover:bg-teal-700"
                  id="toggleHighContrast"
                >
                  High Contrast
                </button>
              </li>





        FIXING TIME AND DATE

        
To display dates in a more human-readable format, you can use JavaScript's Date object along with Intl.DateTimeFormat for formatting. This allows you to customize the date and time display to fit your needs better. Below is a simple example showing how you might convert and display the dates created, updated, and endsAt in a more readable format.

Example JavaScript Function
This function takes a date string in the ISO format (like "2023-11-05T14:15:59.030Z") and returns it in a more readable format:

javascript
Copy code
function formatDateTime(isoString) {
  const date = new Date(isoString);
  return new Intl.DateTimeFormat('en-US', {
    month: 'long', // "January", "February", etc.
    day: '2-digit', // "01", "02", etc.
    year: 'numeric', // "2023"
    hour: '2-digit', // "00" through "23"
    minute: '2-digit', // "00" through "59"
    second: '2-digit', // "00" through "59"
    timeZoneName: 'short' // "GMT", "EST", etc.
  }).format(date);
}
Usage
You can then use this function to format your date strings before displaying them in your HTML:

javascript
Copy code
const created = "2023-11-05T14:15:59.030Z";
const updated = "2023-11-05T16:15:59.030Z";
const endsAt = "2023-11-12T12:15:59.030Z";

document.getElementById('listingCreated').textContent = `Created: ${formatDateTime(created)}`;
document.getElementById('listingUpdated').textContent = `Updated: ${formatDateTime(updated)}`;
document.getElementById('listingEndsAt').textContent = `Ends At: ${formatDateTime(endsAt)}`;
This method allows you to easily adjust the date format across different locales by changing the locale string (e.g., 'en-US') and the options passed to Intl.DateTimeFormat. The above example uses 'en-US' for American English formatting, but you can adjust this as needed to suit your application's audience.

This approach gives you flexibility in how dates are displayed, making them more readable and user-friendly.



CAROUSEL

.carousel {
  overflow: hidden;
  white-space: nowrap;
}

.carousel-items .carousel-item {
  display: inline-block;
  width: 100%; /* Adjust based on the number of items to show at once */
  text-align: center;
}


.carousel {
  overflow: hidden;
  white-space: nowrap;
}

.carousel-items .carousel-item {
  display: inline-block;
  width: 100%; /* Adjust based on the number of items to show at once */
  text-align: center;
}

document.addEventListener('DOMContentLoaded', function() {
  const items = document.querySelectorAll('.carousel-item');
  let currentIndex = 0;

  function showItem(index) {
    // Hide all items
    items.forEach(item => item.style.display = 'none');

    // Show the item at the given index
    items[index].style.display = 'inline-block';
  }

  // Initial display
  showItem(currentIndex);

  // Event listeners for buttons
  document.getElementById('prevBtn').addEventListener('click', function() {
    if (currentIndex > 0) {
      currentIndex--;
      showItem(currentIndex);
    }
  });

  document.getElementById('nextBtn').addEventListener('click', function() {
    if (currentIndex < items.length - 1) {
      currentIndex++;
      showItem(currentIndex);
    }
  });
});



/////summary of displaying listings by gpt:
Certainly! Here's a summary of what we've done to achieve the functionality and how the code works to display the data in your application:

Objective
The goal was to create a dynamic web application that displays listings from an API, allowing users to view detailed information about each listing in a modal popup when clicking on a listing card.

Achieving the Functionality
API Integration:

Developed functionality to fetch listings data from an API using the fetch method.
Implemented error handling to manage any issues that might arise during the API call, ensuring the application remains robust.
Dynamic Listing Cards:

Created a function (listingCardBuild) to dynamically generate HTML content for listing cards based on the data retrieved from the API.
Utilized template literals to insert data into HTML, creating a rich and interactive display of listings.
Each listing card includes a button with a data-listing-id attribute, uniquely identifying each listing for further actions.
Modal Functionality:

Implemented a modal system to display detailed information about a listing when a user clicks on its corresponding card.
The modal content is dynamically populated based on the clicked listing's data, allowing for a detailed view without navigating away from the page.
Event Delegation:

Employed event delegation to handle clicks on dynamically generated listing cards, attaching a single event listener to the container holding the cards instead of individual listeners on each card.
This approach enhances performance and scalability, especially when dealing with a large number of listings.
Scalable and Maintainable Code Structure:

Organized code into modules, separating concerns (API calls, UI updates, modal management) for better maintainability and scalability.
Adopted modern JavaScript ES6+ features like async/await for asynchronous operations, template literals for HTML generation, and arrow functions for concise syntax.
Summary of Functionality
Fetching and Displaying Listings: The application initiates by fetching listings from the API. Each listing's data is then used to create a visual card on the page, displaying key information like title, description, and an image.

Interactive Listing Cards: Users can interact with these cards. Clicking on a card triggers a modal popup, which provides more detailed information about the listing, such as seller details, bid count, and tags.

Dynamic Content Handling: The content of the modal is dynamically updated based on the listing card clicked, demonstrating an effective use of JavaScript for interactive and dynamic content management without page reloads.

Event Delegation for Efficiency: By utilizing event delegation for click events on listing cards, the application efficiently manages user interactions across numerous listings, ensuring that the modal functionality scales with the number of listings displayed.

Conclusion
This project showcases effective techniques for building dynamic and interactive web applications using modern JavaScript. It demonstrates the power of asynchronous JavaScript for API integration, the dynamism of template literals for HTML content generation, and the efficiency of event delegation for handling user interactions in applications with dynamically generated content.
////